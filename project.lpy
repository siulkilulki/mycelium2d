import math
import random

#H-head, turns into TH if there is space(???), else T
#T-tail, normally doesn't change, can sometimes create branch
MAX_DISTANCE = 8
MAX_MULTIPLIER = 6
ANGLE = 5
SCANER_ANGLE = 35
width = 0.1 
length = 1
segments = set() #line segments ((x1,y1), (x2, y2)) <--- position of segment, 

def ccw(A,B,C):
  return (C[1]-A[1]) * (B[0]-A[0]) > (B[1]-A[1]) * (C[0]-A[0])

# Return true if line segments AB and CD intersect
def intersect(A,B,C,D):
  return ccw(A,C,D) != ccw(B,C,D) and ccw(A,B,C) != ccw(A,B,D) 

def intersect_any(new_segment):
    for segment in segments:
      if new_segment[0] == segment[1]:
        continue
      if intersect(new_segment[0], new_segment[1], segment[0], segment[1]):
        return True
    return False

Axiom: _(width) [RHP(1, MAX_DISTANCE)] [+(90) RHP(1, MAX_DISTANCE)] [+(180) RHP(1, MAX_DISTANCE)] [+(270) RHP(1, MAX_DISTANCE)]

derivation length: 300 
production:

?P(z,x,y, type_) : # we have y mapped to x, z mapped to y 
  global position
  if type_ == 0:
    position = (x,y)
    produce
  else: 
    segments.add((position, (x,y)))
    produce
    
?H(z,x,y,type_):
  global heading_left
  global heading_right
  global heading
  if type_ == 0:
    heading_left = (x,y)
  if type_ == 1:
    heading_right = (x,y)
  if type_ == 2:
    heading = (x,y)
  produce

HP(x, multiplier, distance):
  produce ?P(0,0,0,0) [+(SCANER_ANGLE)?H(0,0,0,0)] [-(SCANER_ANGLE) ?H(0,0,0,1)] ?H(0,0,0,2) H(x, multiplier, distance) ?P(0,0,0,1)

H(x, multiplier, distance):
  global position
  next_position_left = (position[0] + heading_left[0], position[1] + heading_left[1]) 
  next_position_right = (position[0] + heading_right[0], position[1] + heading_right[1]) 
  next_position = (position[0] + heading[0], position[1] + heading[1]) 
  if intersect_any((position, next_position_left)) or intersect_any((position, next_position_left)) or intersect_any((position, next_position_right)):
    produce
  else:
    next_position_left_d = (position[0] + heading_left[0]*distance, position[1] + heading_left[1]*distance) 
    next_position_right_d = (position[0] + heading_right[0]*distance, position[1] + heading_right[1]*distance) 
    left_collision = intersect_any((position, next_position_left_d))
    right_collision = intersect_any((position, next_position_right_d))
    angle = 0

    if not left_collision and right_collision:
      angle = ANGLE # +(10)
    elif left_collision and not right_collision:
      angle = -ANGLE # +(-10)

    if left_collision or right_collision:
      multiplier = multiplier + 1 if multiplier < MAX_MULTIPLIER else MAX_MULTIPLIER
      distance = distance - 1 if distance > 1 else 1
      angle *= multiplier
    else:
      distance = distance + 1 if distance < MAX_DISTANCE else MAX_DISTANCE
      multiplier = multiplier - 1 if multiplier > 1 else 1
    print('angle: {}'.format(angle))

    if x == 0:
      produce AHP +(angle) RHP(multiplier, distance)
    else:
      produce SP +(angle) HP(x-1, multiplier, distance)
    
RHP(multiplier, distance):
  r = random.randint(3, 7)
  produce HP(r, multiplier, distance)

AHP:
  angle = random.randint(-30, 30)
  angle = 90 + angle if angle < 0 else -90 + angle
  produce [+(angle) RHP(1, MAX_DISTANCE)] 

SP:
  produce ?P(0,0,0,0) S ?P(0,0,0,1)

interpretation: 
# H: produce SetColor(1) F(length,width)
H: produce f(length)
S: produce SetColor(3) F(length,width)

endlsystem
